GetRewardIntegrationConcreteTest
├── When caller is not approved or owner of token id
│   ├── When caller is not voter
│   │   └── It should revert with {NotAuthorized}
│   └── When caller is voter
│       ├── When number of tokens to be claimed exceeds max rewards
│       │   └── It should revert with {MaxTokensExceeded}
│       └── When number of tokens to be claimed does not exceed max rewards
│           ├── It should encode the owner, token id and token addresses
│           ├── It should forward the message to the corresponding incentive rewards contract on the leaf chain
│           ├── It should claim rewards for owner on the leaf incentive voting contract
│           ├── It should update lastEarn timestamp for token id on leaf incentive voting rewards contract
│           └── It should emit a {ClaimRewards} event
└── When caller is approved or owner of token id
    ├── When number of tokens to be claimed exceeds max rewards_
    │   └── It should revert with {MaxTokensExceeded}
    └── When number of tokens to be claimed does not exceed max rewards_
        ├── It should encode the owner, token id and token addresses
        ├── It should forward the message to the corresponding incentive rewards contract on the leaf chain
        ├── It should claim rewards for owner on the leaf incentive voting contract
        ├── It should update lastEarn timestamp for token id on leaf incentive voting rewards contract
        └── It should emit a {ClaimRewards} event
