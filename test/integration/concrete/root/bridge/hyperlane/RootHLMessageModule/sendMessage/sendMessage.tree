SendMessageIntegrationConcreteTest
├── When the caller is not bridge
│   └── It reverts with {NotBridge}
└── When the caller is bridge
    ├── When the command is deposit
    │   ├── It dispatches the message to the mailbox
    │   ├── It emits the {SentMessage} event
    │   └── It calls receiveMessage on the recipient contract of the same address with the payload
    ├── When the command is notify
    │   ├── It burns the decoded amount of tokens
    │   ├── It dispatches the message to the mailbox
    │   ├── It emits the {SentMessage} event
    │   └── It calls receiveMessage on the recipient contract of the same address with the payload
    ├── When the command is notify without claim
    │   ├── It burns the decoded amount of tokens
    │   ├── It dispatches the message to the mailbox
    │   ├── It emits the {SentMessage} event
    │   └── It calls receiveMessage on the recipient contract of the same address with the payload
    ├── When the command is get incentives
    │   ├── When timestamp is greater than epoch vote end
    │   │   └── It should revert with {SpecialVotingWindow}
    │   └── When timestamp is smaller than or equal to epoch vote end
    │       ├── When timestamp is smaller than or equal to epoch vote start
    │       │   └── It should revert with {DistributeWindow}
    │       └── When timestamp is greater than epoch vote start
    │           ├── When last vote is in current epoch
    │           │   └── It should revert with {AlreadyVotedOrDeposited}
    │           └── When last vote is not in current epoch
    │               ├── It dispatches the message to the mailbox
    │               ├── It emits the {SentMessage} event
    │               └── It calls receiveMessage on the recipient contract of the same address with the payload
    ├── When the command is get fees
    │   ├── When timestamp is greater than epoch vote end_
    │   │   └── It should revert with {SpecialVotingWindow}
    │   └── When timestamp is smaller than or equal to epoch vote end_
    │       ├── When timestamp is smaller than or equal to epoch vote start_
    │       │   └── It should revert with {DistributeWindow}
    │       └── When timestamp is greater than epoch vote start_
    │           ├── When last vote is in current epoch_
    │           │   └── It should revert with {AlreadyVotedOrDeposited}
    │           └── When last vote is not in current epoch_
    │               ├── It dispatches the message to the mailbox
    │               ├── It emits the {SentMessage} event
    │               └── It calls receiveMessage on the recipient contract of the same address with the payload
    └── When the command is createGauge
        ├── It dispatches the message to the mailbox
        ├── It emits the {SentMessage} event
        └── It calls receiveMessage on the recipient contract of the same address with the payload
